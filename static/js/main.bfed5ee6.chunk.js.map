{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","api/auth-api.ts","utils/error-utils.ts","state/auth-reduser.ts","state/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/AddItemForm/AddItemForm.tsx","state/tasks-reducer.ts","state/todolists-reducer.ts","components/EditabeSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","components/TodolistsList/TodolistsList.tsx","features/Login/Login.tsx","AppWithRedux.tsx","state/store.ts","index.tsx","components/Todolist/Todolist.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","newTitle","put","taskTitle","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","React","memo","addItem","disabled","useState","newtitle","setNewtitle","setError","addItemHandler","trim","TextField","label","helperText","onChange","e","currentTarget","onKeyPress","charCode","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","setTitle","autoFocus","onBlur","onDoubleClick","Task","task","changeTask1Title","changeTasks","removeTasks","style","display","justifyContent","alignItems","className","Checkbox","checked","Completed","newIsDoneValue","id","New","newValue","entityStatus","Delete","TodoList","demo","useEffect","todolist","then","res","tasks","items","setTasksAC","catch","addTask","useCallback","onChangTodolistTitleHandler","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onChangTitleHandler","onChangeTaskSatatus","removeTask","tasksForTodolist","filter","t","s","titleTl","removeTodolist","list","map","Button","TodolistsList","todoList","todolists","authMe","tunk","removeTaskAC","deleteTasksTC","resultCode","item","addTaskAC","addTasksTC","getState","updateTask","find","startDate","priority","description","deadline","newTask","changeTaskStatusAC","todoListId","changeTaskStatusTC","changeFilterTL","ChangeTLFilterAC","changeTaskTitleAC","changeTaskTitleTC","addTodolist","createTodolistTC","changeTLEntitySatatusAC","deleteTodolistTC","ChangeTLTitleAC","changeTodolistTitleTC","Grid","container","padding","width","spacing","tl","allTasksTdodList","Paper","to","Login","dispath","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","href","target","margin","getFieldProps","touched","control","AppWithRedux","finally","AppBar","position","Toolbar","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","rootReducer","combineReducers","stateTasks","action","stateCopy","forEach","copyStateTasks","newTasks","entityStatusTask","el","stateTL","newTodolist","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.bfed5ee6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\nimport { RequestStatusType } from \"../state/app-reducer\";\n\nexport const instance = axios.create({\n  baseURL: `https://social-network.samuraijs.com/api/1.1/`,\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"177f53f8-d824-4924-842c-454e53dc1655\",\n  },\n});\n\nexport type TodolistType = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\nexport type TaskType = {\n  id: string;\n  title: string;\n  description: null | string;\n  todoListId: string;\n  // completed: boolean;\n  order: number;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: null | string;\n  deadline: null | string;\n  addedDate: string;\n  entityStatus?: RequestStatusType;\n};\n\nexport type ResponseType<T = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  fieldsErrors: Array<string>;\n  data: T;\n};\n\ntype GetTasksResponseType = {\n  error: string | null;\n  totalCount: number;\n  items: TaskType[];\n};\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string | null;\n  status: number;\n  priority: number;\n  startDate: string | null;\n  deadline: string | null;\n};\n\nexport type DeleteTasksResponseType = {\n  resultCode: number;\n  messages: string[];\n  data: {};\n};\n\nexport const todolistAPI = {\n  getTodolists() {\n    const promise = instance.get<Array<TodolistType>>(\"todo-lists\");\n    return promise;\n  },\n  createTodolist(title: string) {\n    const promise = instance.post<ResponseType<{ item: TodolistType }>>(\n      \"todo-lists\",\n      {\n        title,\n      }\n    );\n    return promise;\n  },\n  deleteTodolist(todolistId: string) {\n    // //! в 1.1/todo-lists/ ${todolistId} где ${todolistId} явл URI-параметром\n\n    const promise = instance.delete<ResponseType>(`todo-lists/${todolistId}`);\n    return promise;\n  },\n  updateTodolist(todolistId: string, newTitle: string) {\n    const promise = instance.put<ResponseType>(`todo-lists/${todolistId}`, {\n      title: newTitle,\n    });\n    return promise;\n  },\n  getTasks(todolistId: string) {\n    const promise = instance.get<GetTasksResponseType>(\n      `todo-lists/${todolistId}//tasks`\n    );\n    return promise;\n  },\n  createTasks(todolistId: string, taskTitle: string) {\n    const promise = instance.post<ResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistId}/tasks`,\n      {\n        title: taskTitle,\n      }\n    );\n    return promise;\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    const promise = instance.put<ResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistId}/tasks/${taskId}`,\n      model\n    );\n    return promise;\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    const promise = instance.delete<ResponseType>(\n      `todo-lists/${todolistId}/tasks/${taskId}`\n    );\n    return promise;\n  },\n};\n","import { instance, ResponseType } from \"./todolist-api\";\n\nexport const authAPI = {\n   login(data: LoginType) {\n     return instance.post<ResponseType<{ userId: number }>>(`auth/login`, data);\n   },\n   logout() {\n     return instance.delete<ResponseType>(`auth/login`);\n   },\n   me() {\n     return instance.get<ResponseType<{ data: GetAuthResponse }>>(`auth/me`);\n   },\n };\n export type LoginType = {\n   email: string;\n   password: string;\n   rememberMe: boolean;\n   captcha?: string;\n };\n type GetAuthResponse = {\n   id: number;\n   email: string;\n   login: string;\n };","// import { setErrorAC, setStatusAC } from '../app/app-reducer';\nimport { Dispatch } from 'redux';\n// import { ResponseType } from '../api/todolists-api';\nimport { ResponseType } from '../api/todolist-api';\nimport {  setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType } from '../state/app-reducer';\n\n// generic function\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n   if (data.messages.length) {\n       dispatch(setAppErrorAC(data.messages[0]))\n   } else {\n       dispatch(setAppErrorAC('Some error occurred'))\n   }\n   dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n   dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n   dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch< SetAppErrorACType | SetAppStatusACType>","import { Dispatch } from \"redux\"\nimport { authAPI, LoginType } from \"../api/auth-api\"\nimport {\n\thandleServerAppError,\n\thandleServerNetworkError,\n} from \"../utils/error-utils\"\nimport {\n\tSetAppErrorACType,\n\tsetAppStatusAC,\n\tSetAppStatusACType,\n} from \"./app-reducer\"\n\nconst initialState = {\n\tisLoggedIn: false,\n}\n\nexport const authReducer = (\n\tstate: InitialStateType = initialState,\n\taction: ActionsType\n): InitialStateType => {\n\tswitch (action.type) {\n\t\tcase \"login/SET-IS-LOGGED-IN\":\n\t\t\treturn { ...state, isLoggedIn: action.value }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n\t({ type: \"login/SET-IS-LOGGED-IN\", value } as const)\n\n// thunks\nexport const loginTC = (data: LoginType) => (\n\tdispatch: Dispatch<ActionsType>\n) => {\n\tdispatch(setAppStatusAC(\"loading\"))\n\tauthAPI\n\t\t.login(data)\n\t\t.then((res) => {\n\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\tdispatch(setIsLoggedInAC(true))\n\t\t\t\tdispatch(setAppStatusAC(\"succeeded\"))\n\t\t\t} else {\n\t\t\t\thandleServerAppError(res.data, dispatch)\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\thandleServerNetworkError(error, dispatch)\n\t\t})\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n\tdispatch(setAppStatusAC(\"loading\"))\n\tauthAPI\n\t\t.logout()\n\t\t.then((res) => {\n\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\tdispatch(setIsLoggedInAC(false))\n\t\t\t\tdispatch(setAppStatusAC(\"succeeded\"))\n\t\t\t} else {\n\t\t\t\thandleServerAppError(res.data, dispatch)\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\thandleServerNetworkError(error, dispatch)\n\t\t})\n}\n\n// types\ntype InitialStateType = typeof initialState\n\nexport type SetIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\n\ntype ActionsType = SetIsLoggedInACType | SetAppStatusACType | SetAppErrorACType\n","import { Dispatch } from \"redux\"\nimport { authAPI } from \"../api/auth-api\"\nimport { setIsLoggedInAC, SetIsLoggedInACType } from \"./auth-reduser\"\n\nconst initialState = {\n\tstatus: \"loading\" as RequestStatusType,\n\terror: null as string | null,\n\tisInitialized: false,\n}\n\nexport const appReducer = (\n\tstate: InitialStateType = initialState,\n\taction: AppActionsType\n): InitialStateType => {\n\tswitch (action.type) {\n\t\tcase \"APP/SET-STATUS\":\n\t\t\treturn { ...state, status: action.status }\n\t\tcase \"APP/SET-ERROR\":\n\t\t\treturn { ...state, error: action.error }\n\t\tcase \"APP/IS-INITIALIZED\":\n\t\t\treturn { ...state, isInitialized: action.isInitialized }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n// actions\nexport const setAppErrorAC = (error: string | null) => ({\n\ttype: \"APP/SET-ERROR\" as const,\n\terror,\n})\nexport const setAppStatusAC = (status: RequestStatusType) => ({\n\ttype: \"APP/SET-STATUS\" as const,\n\tstatus,\n})\nexport const isInitializedAC = (isInitialized: boolean) =>\n\t({ type: \"APP/IS-INITIALIZED\", isInitialized } as const)\n\n// thunk\nexport const initializeAppTC = () => (dispatch: Dispatch<AppActionsType>) => {\n\tauthAPI\n\t\t.me()\n\t\t.then((res) => {\n\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\tdispatch(setIsLoggedInAC(true))\n\t\t\t} else {\n\t\t\t}\n\t\t})\n\t\t.finally(() => {\n\t\t\tdispatch(isInitializedAC(true))\n\t\t\t// dispatch(setAppStatusAC(\"succeeded\"));\n\t\t})\n}\n// type state\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\nexport type InitialStateType = typeof initialState\n\n// type  dispatch\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\nexport type isInitializedACType = ReturnType<typeof isInitializedAC>\n\nexport type AppActionsType =\n\t| SetAppErrorACType\n\t| SetAppStatusACType\n\t| isInitializedACType\n\t| SetIsLoggedInACType\n","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateType } from \"../../state/store\";\nimport { setAppErrorAC } from \"../../state/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport function ErrorSnackbar() {\n  const error = useSelector<AppRootStateType, string | null>(\n    (state) => state.app.error\n  );\n  const dispatch = useDispatch();\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n  };\n\n  return (\n    <Snackbar\n      open={error !== null}\n      autoHideDuration={6000}\n      onClose={handleClose}\n    >\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import {  IconButton, TextField } from \"@material-ui/core\";\nimport { ControlPoint } from \"@material-ui/icons\";\nimport React, { ChangeEvent, useState, KeyboardEvent } from \"react\";\n\nexport type AddItemFormProps = {\n  addItem: (title: string) => void;\n  disabled?:boolean\n};\nconst AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormProps) =>{\n//  const AddItemForm = React.memo(function(props: AddItemFormProps) {\n  let [newtitle, setNewtitle] = useState(\"\");\n  let [error, setError] = useState<string | null>(null);\n\n\n  function addItemHandler() {\n    if (newtitle.trim() !== \"\") {\n      addItem(newtitle);\n      setNewtitle(\"\");\n    } else {\n      setError(\"field is required\");\n    }\n  }\n\n  function onKeyPressHandler(e: KeyboardEvent<HTMLInputElement>) {\n    error && setError(null);\n    if (e.charCode === 13) {\n      addItemHandler();\n      setNewtitle(\"\");\n    }\n  }\n\n  function onChangeHandler(e: ChangeEvent<HTMLInputElement>) {\n    setNewtitle(e.currentTarget.value);\n  }\n\n  return (\n    <div>\n      <TextField\n        variant={\"outlined\"}\n        value={newtitle}\n        disabled={disabled}\n        label=\"Задача\"\n        error={!!error}\n        helperText={error}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n      />\n      <IconButton onClick={addItemHandler} color={\"primary\"} disabled={disabled}>\n        <ControlPoint />\n      </IconButton>\n    </div>\n  );\n})\nexport default AddItemForm;\n","import { Dispatch } from \"redux\"\nimport {\n\tTaskStatuses,\n\tTaskType,\n\ttodolistAPI,\n\tUpdateTaskModelType,\n} from \"../api/todolist-api\"\nimport {\n\thandleServerAppError,\n\thandleServerNetworkError,\n} from \"../utils/error-utils\"\nimport {\n\tAppActionsType,\n\tRequestStatusType,\n\tsetAppStatusAC,\n} from \"./app-reducer\"\nimport { AppRootStateType } from \"./store\"\nimport {\n\tAddTLACType,\n\tRemoveTLACType,\n\tSetTodolistsACType,\n} from \"./todolists-reducer\"\nimport { AxiosError } from \"axios\"\nimport { Task1Type } from \"../components/TodolistsList/TodolistsList\"\n\nconst initialState: Task1Type = {}\n\nexport const tasksReducer = (\n\tstateTasks: Task1Type = initialState,\n\taction: ActionType\n): Task1Type => {\n\tswitch (action.type) {\n\t\tcase \"SET-TASKS\": {\n\t\t\tconst stateCopy = { ...stateTasks }\n\t\t\tstateCopy[action.todolistId] = action.tasks\n\t\t\treturn stateCopy\n\t\t\t// return {...stateTasks, [action.todolistId]:action.tasks};\n\t\t}\n\t\tcase \"SET-TODOLISTS\": {\n\t\t\tconst stateCopy = { ...stateTasks }\n\t\t\taction.todolists.forEach((tl) => {\n\t\t\t\tstateCopy[tl.id] = []\n\t\t\t})\n\t\t\treturn stateCopy\n\t\t}\n\n\t\tcase \"REMOVE-TASKS\": {\n\t\t\tlet copyStateTasks = { ...stateTasks }\n\t\t\tcopyStateTasks[action.todolistId] = copyStateTasks[\n\t\t\t\taction.todolistId\n\t\t\t].filter((t) => t.id !== action.taskId)\n\t\t\treturn copyStateTasks\n\t\t}\n\t\tcase \"ADD-TASKS\": {\n\t\t\tconst stateCopy = { ...stateTasks }\n\t\t\tconst tasks = stateCopy[action.task.todoListId]\n\t\t\tconst newTasks = [action.task, ...tasks]\n\t\t\tstateCopy[action.task.todoListId] = newTasks\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase \"CHANGE-TASKS-STATUS\": {\n\t\t\tlet copyStateTasks = { ...stateTasks }\n\t\t\tlet updateTask = copyStateTasks[action.todolistId].map((t) =>\n\t\t\t\tt.id === action.taskId ? { ...t, status: action.status } : t\n\t\t\t)\n\t\t\treturn { ...stateTasks, [action.todolistId]: updateTask }\n\t\t}\n\t\tcase \"CHANGE-TASKS-TITLE\": {\n\t\t\tlet copyStateTasks = { ...stateTasks }\n\t\t\tlet updateTask = copyStateTasks[action.todolistId].map((t) =>\n\t\t\t\tt.id === action.taskId ? { ...t, title: action.title } : t\n\t\t\t)\n\t\t\treturn { ...stateTasks, [action.todolistId]: updateTask }\n\t\t}\n\t\tcase \"ADD-TODOLIST\": {\n\t\t\treturn { ...stateTasks, [action.todolist.id]: [] }\n\t\t}\n\t\tcase \"REMOVE-TODOLIST\": {\n\t\t\tlet copyStateTasks = { ...stateTasks }\n\t\t\tdelete copyStateTasks[action.todolistId]\n\t\t\treturn copyStateTasks\n\t\t}\n\t\tcase \"CHANGE-TASK-ENTITY-STATUS\": {\n\t\t\tlet copyStateTasks = { ...stateTasks }\n\t\t\tlet entityStatusTask = copyStateTasks[action.todolistId].map((el) =>\n\t\t\t\tel.id === action.taskId ? { ...el, entityStatus: action.status } : el\n\t\t\t)\n\t\t\treturn { ...stateTasks, [action.todolistId]: entityStatusTask }\n\t\t}\n\t\tdefault:\n\t\t\treturn stateTasks\n\t}\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n\treturn {\n\t\ttype: \"REMOVE-TASKS\" as const,\n\t\ttaskId,\n\t\ttodolistId,\n\t}\n}\nexport const addTaskAC = (task: TaskType) => {\n\treturn {\n\t\ttype: \"ADD-TASKS\" as const,\n\t\ttask,\n\t}\n}\n\nexport const changeTaskStatusAC = (\n\ttaskId: string,\n\tstatus: TaskStatuses,\n\ttodolistId: string\n) => {\n\treturn {\n\t\ttype: \"CHANGE-TASKS-STATUS\" as const,\n\t\ttaskId,\n\t\tstatus,\n\t\ttodolistId,\n\t}\n}\n\nexport const changeTaskTitleAC = (\n\ttaskId: string,\n\ttitle: string,\n\ttodolistId: string\n) => {\n\treturn {\n\t\ttype: \"CHANGE-TASKS-TITLE\" as const,\n\t\ttaskId,\n\t\ttitle,\n\t\ttodolistId,\n\t}\n}\n\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\n\treturn { type: \"SET-TASKS\", tasks, todolistId } as const\n}\n\nexport const changeTaskEntitySatatusAC = (\n\ttodolistId: string,\n\ttaskId: string,\n\tstatus: RequestStatusType\n) => ({\n\ttype: \"CHANGE-TASK-ENTITY-STATUS\" as const,\n\ttodolistId,\n\ttaskId,\n\tstatus,\n})\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => {\n\treturn (dispatch: Dispatch<ActionType>) => {\n\t\tdispatch(setAppStatusAC(\"loading\"))\n\t\ttodolistAPI\n\t\t\t.getTasks(todolistId)\n\t\t\t.then((res) => {\n\t\t\t\tconst tasks = res.data.items\n\t\t\t\tdispatch(setTasksAC(tasks, todolistId))\n\t\t\t\tdispatch(setAppStatusAC(\"succeeded\"))\n\t\t\t})\n\t\t\t.catch((error: AxiosError) => {\n\t\t\t\thandleServerNetworkError(error, dispatch)\n\t\t\t})\n\t}\n}\nexport const deleteTasksTC = (taskId: string, todolistId: string) => {\n\treturn (dispatch: Dispatch<ActionType>) => {\n\t\tdispatch(setAppStatusAC(\"loading\"))\n\t\ttodolistAPI\n\t\t\t.deleteTask(todolistId, taskId)\n\t\t\t.then((res) => {\n\t\t\t\tdispatch(removeTaskAC(taskId, todolistId))\n\t\t\t\tdispatch(setAppStatusAC(\"succeeded\"))\n\t\t\t})\n\t\t\t.catch((error: AxiosError) => {\n\t\t\t\thandleServerNetworkError(error, dispatch)\n\t\t\t})\n\t}\n}\nexport const addTasksTC = (title: string, todolistId: string) => {\n\treturn (dispatch: Dispatch<ActionType>) => {\n\t\tdispatch(setAppStatusAC(\"loading\"))\n\t\ttodolistAPI\n\t\t\t.createTasks(todolistId, title)\n\t\t\t.then((res) => {\n\t\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\t\tlet task = res.data.data.item\n\t\t\t\t\tdispatch(addTaskAC(task))\n\t\t\t\t\tdispatch(setAppStatusAC(\"succeeded\"))\n\t\t\t\t} else {\n\t\t\t\t\thandleServerAppError(res.data, dispatch)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\thandleServerNetworkError(error, dispatch)\n\t\t\t})\n\t}\n}\nexport const changeTaskStatusTC = (\n\ttaskId: string,\n\tstatus: TaskStatuses,\n\ttodolistId: string\n) => {\n\treturn (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\n\t\tlet state = getState()\n\t\tconst allTasksFromState = getState().tasks\n\t\tconst tasksForCurrentTodolist = allTasksFromState[todolistId]\n\t\tconst updateTask = tasksForCurrentTodolist.find((t) => {\n\t\t\treturn t.id === taskId\n\t\t})\n\t\tif (updateTask) {\n\t\t\t// const model: UpdateTaskModelType = { ...updateTask, status };\n\t\t\tconst model: UpdateTaskModelType = {\n\t\t\t\ttitle: updateTask.title,\n\t\t\t\tstartDate: updateTask.startDate,\n\t\t\t\tpriority: updateTask.priority,\n\t\t\t\tdescription: updateTask.description,\n\t\t\t\tdeadline: updateTask.deadline,\n\t\t\t\tstatus: status,\n\t\t\t}\n\t\t\tdispatch(setAppStatusAC(\"loading\"))\n\t\t\ttodolistAPI\n\t\t\t\t.updateTask(todolistId, taskId, model)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tconst newTask = res.data.data.item\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\tchangeTaskStatusAC(newTask.id, newTask.status, newTask.todoListId)\n\t\t\t\t\t)\n\t\t\t\t\tdispatch(setAppStatusAC(\"succeeded\"))\n\t\t\t\t})\n\t\t\t\t.catch((error: AxiosError) => {\n\t\t\t\t\thandleServerNetworkError(error, dispatch)\n\t\t\t\t})\n\t\t}\n\t}\n}\n\nexport const changeTaskTitleTC = (\n\ttaskId: string,\n\ttitle: string,\n\ttodolistId: string\n) => {\n\treturn (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\n\t\tlet state = getState()\n\t\tconst allTasksFromState = getState().tasks\n\t\tconst tasksForCurrentTodolist = allTasksFromState[todolistId]\n\t\tconst updateTask = tasksForCurrentTodolist.find((t) => {\n\t\t\treturn t.id === taskId\n\t\t})\n\t\tif (updateTask) {\n\t\t\tconst model: UpdateTaskModelType = {\n\t\t\t\ttitle: title,\n\t\t\t\tstartDate: updateTask.startDate,\n\t\t\t\tpriority: updateTask.priority,\n\t\t\t\tdescription: updateTask.description,\n\t\t\t\tdeadline: updateTask.deadline,\n\t\t\t\tstatus: updateTask.status,\n\t\t\t}\n\t\t\tdispatch(setAppStatusAC(\"loading\"))\n\t\t\ttodolistAPI\n\t\t\t\t.updateTask(todolistId, taskId, model)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\t\t\tconst newTask = res.data.data.item\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tchangeTaskTitleAC(newTask.id, newTask.title, newTask.todoListId)\n\t\t\t\t\t\t)\n\t\t\t\t\t\tdispatch(setAppStatusAC(\"succeeded\"))\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandleServerAppError(res.data, dispatch)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error: AxiosError) => {\n\t\t\t\t\thandleServerNetworkError(error, dispatch)\n\t\t\t\t})\n\t\t}\n\t}\n}\n\n// type  dispatch actions\nexport type RemoveTasksACType = ReturnType<typeof removeTaskAC>\nexport type AddTasksACType = ReturnType<typeof addTaskAC>\nexport type ChangeStatusTasksACType = ReturnType<typeof changeTaskStatusAC>\nexport type ChangeStatusitleACType = ReturnType<typeof changeTaskTitleAC>\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\nexport type ChangeTaskEntitySatatusACType = ReturnType<\n\ttypeof changeTaskEntitySatatusAC\n>\n\nexport type ActionType =\n\t| RemoveTasksACType\n\t| AddTasksACType\n\t| ChangeStatusTasksACType\n\t| ChangeStatusitleACType\n\t| AddTLACType\n\t| RemoveTLACType\n\t| SetTodolistsACType\n\t| SetTasksActionType\n\t| AppActionsType\n\t| ChangeTaskEntitySatatusACType\n","import { Dispatch } from \"redux\";\nimport { todolistAPI, TodolistType } from \"../api/todolist-api\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../utils/error-utils\";\nimport {\n  AppActionsType,\n  RequestStatusType,\n  setAppStatusAC,\n} from \"./app-reducer\";\nimport { AxiosError } from \"axios\";\n\nconst initialState: Array<TodolistDomainType> = [];\n\nexport const todoListReducer = (\n  stateTL: Array<TodolistDomainType> = initialState,\n  action: ActionType\n): Array<TodolistDomainType> => {\n  switch (action.type) {\n    case \"SET-TODOLISTS\": {\n      return action.todolists.map((tl) => ({\n        ...tl,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      }));\n    }\n    case \"REMOVE-TODOLIST\":\n      return stateTL.filter((tl) => tl.id !== action.todolistId);\n\n    case \"ADD-TODOLIST\":\n      const newTodolist: TodolistDomainType = {\n        ...action.todolist,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      };\n      return [newTodolist, ...stateTL];\n\n    case \"CHANGE-TODOLIST-TITLE\":\n      return stateTL.map((el) =>\n        el.id === action.todolistId ? { ...el, title: action.newTitle } : el\n      );\n\n    case \"CHANGE-TODOLIST-FILTER\":\n      return stateTL.map((el) =>\n        el.id === action.todolistId ? { ...el, filter: action.filter } : el\n      );\n    case \"CHANGE-TODOLIST-ENTITY-STATUS\":\n      return stateTL.map((el) =>\n        el.id === action.todolistId\n          ? { ...el, entityStatus: action.status }\n          : el\n      );\n    default:\n      return stateTL;\n  }\n};\n\n// actions\nexport const RemoveTLAC = (id: string) => {\n  return {\n    type: \"REMOVE-TODOLIST\" as const,\n    todolistId: id,\n  };\n};\nexport const AddTLAC = (todolist: TodolistType) => {\n  return {\n    type: \"ADD-TODOLIST\" as const,\n    todolist,\n  };\n};\nexport const ChangeTLTitleAC = (todolistId: string, newTitle: string) => ({\n  type: \"CHANGE-TODOLIST-TITLE\" as const,\n  todolistId,\n  newTitle,\n});\nexport const ChangeTLFilterAC = (todolistId: string, filter: FilterType) => ({\n  type: \"CHANGE-TODOLIST-FILTER\" as const,\n  todolistId,\n  filter,\n});\nexport const changeTLEntitySatatusAC = (\n  todolistId: string,\n  status: RequestStatusType\n) => ({\n  type: \"CHANGE-TODOLIST-ENTITY-STATUS\" as const,\n  todolistId,\n  status,\n});\n\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\n  return { type: \"SET-TODOLISTS\" as const, todolists };\n};\n\n// thunks\nexport const fetchTodolistsTC = () => {\n  return (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    todolistAPI\n      .getTodolists()\n      .then((res) => {\n        dispatch(setTodolistsAC(res.data));\n        dispatch(setAppStatusAC(\"succeeded\"));\n      })\n      .catch((error: AxiosError) => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n};\n\nexport const createTodolistTC = (title: string) => {\n  return (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    todolistAPI\n      .createTodolist(title)\n      .then((res) => {\n        if (res.data.resultCode === 0) {\n          dispatch(AddTLAC(res.data.data.item));\n          dispatch(setAppStatusAC(\"succeeded\"));\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch((error: AxiosError) => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n};\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => {\n  return (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    todolistAPI\n      .updateTodolist(todolistId, title)\n      .then((res) => {\n        if (res.data.resultCode === 0) {\n          dispatch(ChangeTLTitleAC(todolistId, title));\n          dispatch(setAppStatusAC(\"succeeded\"));\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch((error: AxiosError) => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n};\nexport const deleteTodolistTC = (todolistId: string) => {\n  return (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    dispatch(changeTLEntitySatatusAC(todolistId, \"loading\"));\n    todolistAPI\n      .deleteTodolist(todolistId)\n      .then((res) => {\n        dispatch(RemoveTLAC(todolistId));\n        dispatch(setAppStatusAC(\"succeeded\"));\n      })\n      .catch((error: AxiosError) => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n};\n\n// type state\nexport type FilterType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterType;\n  entityStatus: RequestStatusType;\n};\n\n// type  dispatch actions\nexport type RemoveTLACType = ReturnType<typeof RemoveTLAC>;\nexport type AddTLACType = ReturnType<typeof AddTLAC>;\nexport type ChangeTLTitleACType = ReturnType<typeof ChangeTLTitleAC>;\nexport type ChangeTLFilterACType = ReturnType<typeof ChangeTLFilterAC>;\nexport type SetTodolistsACType = ReturnType<typeof setTodolistsAC>;\nexport type ChangeTLEntitySatatusACType = ReturnType<\n  typeof changeTLEntitySatatusAC\n>;\n\nexport type ActionType =\n  | RemoveTLACType\n  | AddTLACType\n  | ChangeTLTitleACType\n  | ChangeTLFilterACType\n  | SetTodolistsACType\n  | ChangeTLEntitySatatusACType\n  | AppActionsType;","import { TextField } from \"@material-ui/core\";\nimport React, { ChangeEvent,  useState } from \"react\";\n\nexport type EditableSpanPropsType = {\n  title: string;\n  onChange: (newValue: string) => void;\n  disabled?:boolean\n};\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  let [editMode, setEditMode] = useState(false);\n  let [title, setTitle] = useState(\"\");\n\n  const activateeditMode = () => {\n    setEditMode(true);\n    setTitle(props.title);\n  };\n\n  const activateeViewMode = () => {\n    setEditMode(false);\n    props.onChange(title);\n  };\n  const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField\n      value={title}\n      onChange={onChangeTitleHandler}\n      autoFocus\n      onBlur={activateeViewMode}\n    />\n  ) : (\n    <span onDoubleClick={activateeditMode} > {props.title} </span>\n  );\n});\n","import { Checkbox, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport React, { ChangeEvent } from \"react\";\nimport { TaskStatuses, TaskType } from \"../../api/todolist-api\";\nimport { EditableSpan } from \"../EditabeSpan/EditableSpan\";\nimport { RequestStatusType } from \"../../state/app-reducer\";\nimport s from \"./Task.module.css\";\n\nexport type TaskPropsType = {\n  task: TaskType;\n  changeTask1Title: (taskId: string, newValue: string) => void;\n  changeTasks: (taskId: string, newIsDoneValue: TaskStatuses) => void;\n  removeTasks: (taskId: string) => void;\n};\n \nexport const Task = React.memo(\n  ({ task, changeTask1Title, changeTasks, removeTasks }: TaskPropsType) => {\n\n    const onChangTitleHandler = (newValue: string) => {\n      changeTask1Title(task.id, newValue);\n    };\n    const onChangeTaskSatatus = (e: ChangeEvent<HTMLInputElement>) => {\n      let newIsDoneValue = e.currentTarget.checked\n      changeTasks(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New);\n    };\n    const removeTask = () => {\n      removeTasks(task.id);\n    };\n    return (\n       <li key={task.id} style={{display: 'flex', justifyContent:'space-between', alignItems:'center'}}className={task.status ? \"isDone\" : \"\"}> \n        <Checkbox\n          checked={task.status === TaskStatuses.Completed}\n          onChange={onChangeTaskSatatus}\n        />\n\n        <EditableSpan title={task.title} onChange={onChangTitleHandler} disabled={task.entityStatus === 'loading'}/>\n\n        <IconButton onClick={removeTask}>\n          <Delete  />\n        </IconButton>\n      \n      </li>\n      \n    );\n  }\n);\n","import { Button, IconButton } from \"@material-ui/core\"\nimport { Delete } from \"@material-ui/icons\"\nimport React, { useCallback, useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport AddItemForm from \"../AddItemForm/AddItemForm\"\nimport { TaskStatuses, TaskType } from \"../../api/todolist-api\"\nimport { EditableSpan } from \"../EditabeSpan/EditableSpan\"\nimport { fetchTasksTC } from \"../../state/tasks-reducer\"\nimport { FilterType, TodolistDomainType } from \"../../state/todolists-reducer\"\nimport { Task } from \"../Task/Task\"\nimport s from \"./Todolist.module.css\"\n\ntype TodolistPropsType = {\n\ttodolist: TodolistDomainType\n\ttasks: Array<TaskType>\n\tremoveTasks: (id: string, todolistId: string) => void\n\tchangeFilter: (value: FilterType, todolistId: string) => void\n\taddTask: (title: string, todolistId: string) => void\n\tchangeTasks: (id: string, status: TaskStatuses, todolistId: string) => void\n\tremoveTodolist: (id: string) => void\n\tchangeTask1Title: (id: string, newTitle: string, todolistId: string) => void\n\tchangeTodolistTitle: (id: string, newTitle: string) => void\n\tdemo?: boolean // для storybook\n}\n\nconst TodoList = React.memo(({ demo = false, ...props }: TodolistPropsType) => {\n\tlet dispatch = useDispatch()\n\n\tuseEffect(() => {\n\t\tif (demo) {\n\t\t\treturn\n\t\t}\n\t\tdispatch(fetchTasksTC(props.todolist.id))\n\t}, [])\n\n\tconst addTask = useCallback((title: string) => {\n\t\tprops.addTask(title, props.todolist.id)\n\t}, [])\n\tconst removeTodolist1 = () => {\n\t\tprops.removeTodolist(props.todolist.id)\n\t}\n\n\tconst onChangTodolistTitleHandler = useCallback(\n\t\t(newTitle: string) => {\n\t\t\tprops.changeTodolistTitle(props.todolist.id, newTitle)\n\t\t},\n\t\t[props.changeTodolistTitle, props.todolist.id]\n\t)\n\n\tconst onAllClickHandler = useCallback(() => {\n\t\tprops.changeFilter(\"all\", props.todolist.id)\n\t}, [props.changeFilter, props.todolist.id])\n\n\tconst onActiveClickHandler = useCallback(() => {\n\t\tprops.changeFilter(\"active\", props.todolist.id)\n\t}, [props.changeFilter, props.todolist.id])\n\n\tconst onCompletedClickHandler = useCallback(() => {\n\t\tprops.changeFilter(\"completed\", props.todolist.id)\n\t}, [props.changeFilter, props.todolist.id])\n\n\tconst onChangTitleHandler = useCallback(\n\t\t(taskId: string, newValue: string) => {\n\t\t\tprops.changeTask1Title(taskId, newValue, props.todolist.id)\n\t\t},\n\t\t[props.changeTask1Title, props.todolist.id]\n\t)\n\tconst onChangeTaskSatatus = useCallback(\n\t\t(taskId: string, newIsDoneValue: TaskStatuses) => {\n\t\t\tprops.changeTasks(taskId, newIsDoneValue, props.todolist.id)\n\t\t},\n\t\t[props.changeTasks, props.todolist.id]\n\t)\n\tconst removeTask = useCallback(\n\t\t(taskId: string) => {\n\t\t\tprops.removeTasks(taskId, props.todolist.id)\n\t\t},\n\t\t[props.removeTasks, props.todolist.id]\n\t)\n\n\tlet tasksForTodolist = props.tasks\n\tif (props.todolist.filter === \"completed\") {\n\t\ttasksForTodolist = props.tasks.filter(\n\t\t\t(t) => t.status === TaskStatuses.Completed\n\t\t)\n\t}\n\tif (props.todolist.filter === \"active\") {\n\t\ttasksForTodolist = props.tasks.filter((t) => t.status === TaskStatuses.New)\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<h3 className={s.titleTl}>\n\t\t\t\t<span className={s.title} >\n\t\t\t\t\t<EditableSpan\n\t\t\t\t\t\ttitle={props.todolist.title}\n\t\t\t\t\t\tonChange={onChangTodolistTitleHandler}\n\t\t\t\t\t/>\n\t\t\t\t</span>\n\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={removeTodolist1}\n\t\t\t\t\tdisabled={props.todolist.entityStatus === \"loading\"}\n\t\t\t\t>\n\t\t\t\t\t<Delete />\n\t\t\t\t</IconButton>\n\t\t\t</h3>\n\t\t\t<AddItemForm\n\t\t\t\taddItem={addTask}\n\t\t\t\tdisabled={props.todolist.entityStatus === \"loading\"}\n\t\t\t/>\n\t\t\t<ul className={s.list}>\n\t\t\t\t{tasksForTodolist.map((t) => (\n\t\t\t\t\t<Task\n\t\t\t\t\t\tkey={props.todolist.id}\n\t\t\t\t\t\ttask={t}\n\t\t\t\t\t\tchangeTask1Title={onChangTitleHandler}\n\t\t\t\t\t\tchangeTasks={onChangeTaskSatatus}\n\t\t\t\t\t\tremoveTasks={removeTask}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ul>\n\n\t\t\t<div>\n\t\t\t\t<Button\n\t\t\t\t\tvariant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\n\t\t\t\t\tonClick={onAllClickHandler}\n\t\t\t\t>\n\t\t\t\t\tAll\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\tcolor={\"primary\"}\n\t\t\t\t\tvariant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\n\t\t\t\t\tonClick={onActiveClickHandler}\n\t\t\t\t>\n\t\t\t\t\tActive\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\tcolor={\"secondary\"}\n\t\t\t\t\tvariant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\n\t\t\t\t\tonClick={onCompletedClickHandler}\n\t\t\t\t>\n\t\t\t\t\tCompleted\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t)\n})\nexport default TodoList\n","import { Paper } from \"@material-ui/core\"\r\nimport React, { useCallback, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport AddItemForm from \"../AddItemForm/AddItemForm\"\r\nimport { TaskStatuses, TaskType } from \"../../api/todolist-api\"\r\nimport { AppRootStateType } from \"../../state/store\"\r\nimport {\r\n\taddTasksTC,\r\n\tchangeTaskStatusTC,\r\n\tchangeTaskTitleTC,\r\n\tdeleteTasksTC,\r\n} from \"../../state/tasks-reducer\"\r\nimport {\r\n\tChangeTLFilterAC,\r\n\tchangeTodolistTitleTC,\r\n\tcreateTodolistTC,\r\n\tdeleteTodolistTC,\r\n\tfetchTodolistsTC,\r\n\tFilterType,\r\n\tTodolistDomainType,\r\n} from \"../../state/todolists-reducer\"\r\nimport TodoList from \"../Todolist/Todolist\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\ntype TodolistsListType = {\r\n\tdemo?: boolean // для storybook\r\n}\r\nexport type Task1Type = {\r\n\t[key: string]: Array<TaskType>\r\n}\r\nexport function TodolistsList({ demo = false }: TodolistsListType) {\r\n\r\n\tlet todoList = useSelector<AppRootStateType, Array<TodolistDomainType>>(\r\n\t\t(state) => state.todolists\r\n\t)\r\n\tlet tasks = useSelector<AppRootStateType, Task1Type>((state) => state.tasks)\r\n  const isLoggedIn=useSelector<AppRootStateType, boolean>(state=> state.authMe.isLoggedIn)\r\n\tlet dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (demo || !isLoggedIn) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(fetchTodolistsTC())\r\n\t}, [])\r\n\r\n\tconst removeTasks = useCallback(\r\n\t\t(id: string, todolistId: string) => {\r\n\t\t\tlet tunk = deleteTasksTC(id, todolistId)\r\n\t\t\tdispatch(tunk)\r\n\t\t},\r\n\t\t[dispatch]\r\n\t)\r\n\r\n\tconst addTask = useCallback((title: string, todolistId: string) => {\r\n\t\tlet tunk = addTasksTC(title, todolistId)\r\n\t\tdispatch(tunk)\r\n\t}, [])\r\n\r\n\tconst changeTasks = useCallback(\r\n\t\t(id: string, status: TaskStatuses, todolistId: string) => {\r\n\t\t\tdispatch(changeTaskStatusTC(id, status, todolistId))\r\n\t\t},\r\n\t\t[]\r\n\t)\r\n\r\n\tconst changeFilterTL = useCallback(\r\n\t\t(value: FilterType, todolistId: string) => {\r\n\t\t\tdispatch(ChangeTLFilterAC(todolistId, value))\r\n\t\t},\r\n\t\t[]\r\n\t)\r\n\r\n\tconst changeTask1Title = useCallback(\r\n\t\t(id: string, newTitle: string, todolistId: string) => {\r\n\t\t\tdispatch(changeTaskTitleTC(id, newTitle, todolistId))\r\n\t\t},\r\n\t\t[]\r\n\t)\r\n\r\n\tconst addTodolist = useCallback((title: string) => {\r\n\t\tlet tunk = createTodolistTC(title)\r\n\t\tdispatch(tunk)\r\n\t}, [])\r\n\r\n\tconst removeTodolist = useCallback((todolistId: string) => {\r\n\t\tlet tunk = deleteTodolistTC(todolistId)\r\n\t\tdispatch(tunk)\r\n\t}, [])\r\n\tconst changeTodolistTitle = useCallback(\r\n\t\t(todolistId: string, newTitle: string) => {\r\n\t\t\tdispatch(changeTodolistTitleTC(todolistId, newTitle))\r\n\t\t},\r\n\t\t[]\r\n\t)\r\n  if (!isLoggedIn){\r\n    return <Redirect to={'/login'}/>\r\n }\r\n\treturn (\r\n\t\t<div className='tlList'>\r\n\t\t\t<Grid container style={{ padding: \"20px\", width: '300px' }}>\r\n\t\t\t\t<AddItemForm addItem={addTodolist} />\r\n\t\t\t</Grid>\r\n\t\t\t<Grid container spacing={9}>\r\n\t\t\t\t{todoList.map((tl) => {\r\n\t\t\t\t\tlet allTasksTdodList = tasks[tl.id]\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Grid item key={tl.id}>\r\n\t\t\t\t\t\t\t<Paper style={{ padding: \"20px\" }}>\r\n\t\t\t\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\t\t\t\tkey={tl.id}\r\n\t\t\t\t\t\t\t\t\ttodolist={tl}\r\n\t\t\t\t\t\t\t\t\ttasks={allTasksTdodList}\r\n\t\t\t\t\t\t\t\t\tremoveTasks={removeTasks}\r\n\t\t\t\t\t\t\t\t\tchangeFilter={changeFilterTL}\r\n\t\t\t\t\t\t\t\t\taddTask={addTask}\r\n\t\t\t\t\t\t\t\t\tchangeTasks={changeTasks}\r\n\t\t\t\t\t\t\t\t\tremoveTodolist={removeTodolist}\r\n\t\t\t\t\t\t\t\t\tchangeTask1Title={changeTask1Title}\r\n\t\t\t\t\t\t\t\t\tchangeTodolistTitle={changeTodolistTitle}\r\n\t\t\t\t\t\t\t\t\tdemo={demo}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","import Button from '@material-ui/core/Button/Button'\nimport Checkbox from '@material-ui/core/Checkbox/Checkbox'\nimport FormControl from '@material-ui/core/FormControl/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel/FormControlLabel'\nimport FormGroup from '@material-ui/core/FormGroup/FormGroup'\nimport FormLabel from '@material-ui/core/FormLabel/FormLabel'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField/TextField'\nimport { useFormik } from 'formik'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { loginTC } from '../../state/auth-reduser'\nimport { AppRootStateType } from '../../state/store'\n\nexport const Login = () => {\n  \n    const isLoggedIn=useSelector<AppRootStateType, boolean>(state=> state.authMe.isLoggedIn)\n    const dispath = useDispatch()\n \n    type FormikErrorType = {\n       email?: string\n       password?: string\n       rememberMe?: boolean\n    }\n    \n    const formik = useFormik({\n       initialValues: { \n           email: '',\n           password: '',\n           rememberMe: false\n       },\n       validate: (values) => {\n           const errors: FormikErrorType = {};\n           if (!values.email) {\n               errors.email = 'Required';\n           } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n               errors.email = 'Invalid email address';\n           }\n           if (!values.password) {\n             errors.password = 'Required';\n           } else if (values.password.length < 3) {\n             errors.password = 'Password must be more than 3 symbols';\n           }\n           return errors;\n       },\n       onSubmit: values => {\n          dispath(loginTC(values))\n           formik.resetForm()\n       },\n    })\n    \n \n    if (isLoggedIn){\n       return <Redirect to={'/'}/>\n    }\n    \n   return (\n     <Grid container justify=\"center\">\n       <Grid item xs={4}>\n          <form onSubmit={formik.handleSubmit}>\n         <FormControl>\n           <FormLabel>\n             <p>\n               To log in get registered\n               <a\n                 href={\"https://social-network.samuraijs.com/\"}\n                 target={\"_blank\"}\n               >\n                 here\n               </a>\n             </p>\n             <p>or use common test account credentials:</p>\n             <p>Email: free@samuraijs.com</p>\n             <p>Password: free</p>\n           </FormLabel>\n           <FormGroup>\n             <TextField\n               label=\"Email\"\n               margin=\"normal\"\n             //   name=\"email\"\n             //   onChange={formik.handleChange}\n             //   value={formik.values.email}\n             //   onBlur={formik.handleBlur}\n               {...formik.getFieldProps('email')}\n             />\n             {formik.touched.email && formik.errors.email ? <div style={{'color':'red'}}>{formik.errors.email}</div> : null}\n             <TextField\n               type=\"password\"\n               label=\"Password\"\n               margin=\"normal\"\n               {...formik.getFieldProps('password')}\n             />\n             {formik.touched.password && formik.errors.password ? <div style={{'color':'red'}}>{formik.errors.password}</div> : null}\n             <FormControlLabel\n               label={\"Remember me\"}\n               control={\n                 <Checkbox\n                  {...formik.getFieldProps('rememberMe')}\n                   checked={formik.values.rememberMe}\n                 />\n               }\n             />\n             <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n               Login\n             </Button>\n           </FormGroup>\n         </FormControl>\n         </form>\n       </Grid>\n     </Grid>\n   );\n \n}\n","import {\r\n\tAppBar,\r\n\tButton,\r\n\tContainer,\r\n\tIconButton,\r\n\tLinearProgress,\r\n\tToolbar,\r\n\tTypography,\r\n} from \"@material-ui/core\"\r\nimport { Menu } from \"@material-ui/icons\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { BrowserRouter, HashRouter, Redirect, Route, Switch } from \"react-router-dom\"\r\nimport  \"./App.css\"\r\n// import s from \"./Todolist.module.css\"\r\nimport { ErrorSnackbar } from \"./components/ErrorSnackbar/ErrorSnackbar\"\r\nimport { initializeAppTC, RequestStatusType } from \"./state/app-reducer\"\r\nimport { AppRootStateType } from \"./state/store\"\r\nimport { TodolistsList } from \"./components/TodolistsList/TodolistsList\"\r\nimport { Login } from \"./features/Login/Login\"\r\nimport { useEffect } from \"react\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\"\r\nimport { logoutTC } from \"./state/auth-reduser\"\r\n\r\ntype AppType = {\r\n\tdemo?: boolean // для storybook\r\n}\r\n\r\nfunction AppWithRedux({ demo = false }: AppType) {\r\n\tconst status = useSelector<AppRootStateType, RequestStatusType>(\r\n\t\t(state) => state.app.status\r\n\t)\r\n  const isInitialized=useSelector<AppRootStateType, boolean>(state=> state.app.isInitialized)\r\n  const isLoggedIn=useSelector<AppRootStateType, boolean>(state=> state.authMe.isLoggedIn)\r\n  const dispath = useDispatch()\r\n\r\n  useEffect( ()=> {\r\n    dispath(initializeAppTC ())\r\n  },[])\r\n\r\n  const logoutHandler= ()=>{\r\n    dispath(logoutTC())\r\n  }\r\n  if (!isInitialized) {\r\n    return <div\r\n        style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n        <CircularProgress/>\r\n    </div>\r\n }\r\n\treturn (\r\n\t\t<HashRouter>\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<ErrorSnackbar />\r\n\t\t\t\t<AppBar position='static'>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t{/* <IconButton edge='start' color='inherit' aria-label='menu'>\r\n\t\t\t\t\t\t\t<Menu />\r\n\t\t\t\t\t\t</IconButton> */}\r\n\t\t\t\t\t\t{/* <Typography variant='h6'>News</Typography> */}\r\n            { isLoggedIn && <Button className='btnLogOut' color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t{status === \"loading\" && <LinearProgress color='secondary' />}\r\n\t\t\t\t</AppBar>\r\n\r\n\t\t\t\t<Container fixed>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route\r\n\t\t\t\t\t\t\texact\r\n\t\t\t\t\t\t\tpath={\"/\"}\r\n\t\t\t\t\t\t\trender={() => <TodolistsList demo={demo} />}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Route path={\"/login\"} render={() => <Login />} />\r\n\r\n\t\t\t\t\t\t<Route path={\"/404\"} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n\t\t\t\t\t\t<Redirect from={\"*\"} to={\"/404\"} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t</HashRouter>\r\n\t)\r\n}\r\n\r\nexport default AppWithRedux\r\n","import { appReducer } from './app-reducer';\nimport {tasksReducer} from './tasks-reducer';\nimport {todoListReducer} from './todolists-reducer';\nimport {combineReducers, createStore} from 'redux';\nimport { applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { authReducer } from './auth-reduser';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n   tasks: tasksReducer,\n   todolists: todoListReducer,\n   app: appReducer,\n   authMe: authReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <AppWithRedux />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleTl\":\"Todolist_titleTl__3fPWc\",\"title\":\"Todolist_title__1dF2V\",\"list\":\"Todolist_list__2Fg6o\"};"],"sourceRoot":""}